[{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ahcombs.github.io/bayesactR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ahcombs.github.io/bayesactR/articles/bayesactR.html","id":"getting-started-with-bayesactr","dir":"Articles","previous_headings":"","what":"Getting started with bayesactR","title":"bayesactR","text":"biggest hurdle using package likely setup. Unfortunately, currently little complex number pieces required. future iterations hoping streamline significantly.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/bayesactR.html","id":"prerequisites-downloading-and-installing-the-bayesact-c-package","dir":"Articles","previous_headings":"Getting started with bayesactR","what":"Prerequisites: downloading and installing the BayesACT C package","title":"bayesactR","text":"need BayesACT C code order run simulations using R package. currently available publicly, happy provide interested using research purposes. researcher interested using BayesACT, contact Dr. Jesse Hoey download link. Make note file path top level directory C code–need functions package. version BayesACT bayesactR currently set work listed top readme–recommend install version possible. C package requires pieces software–see documentation information beyond included . summary, : C compiler. testing used GCC, pain set Mac, generally preferred applications. Another option much simpler download XCode includes compiler clang. Fair warning relatively large program likely take long time download install. find clang work, please let know! GSL (GNU Scientific Library). recent version recommended. reason must use old version, see BayesACT C documentation (C package bayesact/docs/) instructions modify things work. Python 3.8. Note recent version Python, one C code requires. Mac, must download directly Python website order installed place BayesACT can find . Installing using homebrew, anaconda, package managers work! C package includes number examples instructions run using command line. may helpful debugging purposes order ensure C code set correctly.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/bayesactR.html","id":"installation-of-bayesactr","dir":"Articles","previous_headings":"Getting started with bayesactR","what":"Installation of bayesactR","title":"bayesactR","text":"can install development version bayesactR GitHub : , congratulations! set start running simulations. See page information steps required set run simulations.","code":"# install.packages(\"devtools\") devtools::install_github(\"ahcombs/bayesactR\")"},{"path":"https://ahcombs.github.io/bayesactR/articles/output.html","id":"results-and-analysis","dir":"Articles","previous_headings":"","what":"Results and analysis","title":"Simulation results","text":"future iterations package, intend add functions help summarize display output useful ways. thoughts kinds things may helpful , please get touch! Currently, BayesACT produces three types output:","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/output.html","id":"csv-output","dir":"Articles","previous_headings":"Results and analysis","what":"CSV output","title":"Simulation results","text":"Likely use analyzing results csv output. saved directory specified run_bayesact(). Read read.csv() readr::read_csv(). csv file contains one row per actor turn, reports number different statistics state interaction turn. results created example shown simulation setup run help page ’s easy see many identities behaviors chosen make much sense context. Subsetting dictionaries identities belong relevant institution may help .","code":"results <- read.csv2(\"/path/to/output/readme_simfile.csv\", sep = \",\", header = TRUE) head(results[,1:6])"},{"path":"https://ahcombs.github.io/bayesactR/articles/output.html","id":"terminal-output","dir":"Articles","previous_headings":"Results and analysis","what":"Terminal output","title":"Simulation results","text":"BayesACT run command line, produces large amount text output printed terminal. bayesactR package saves output text file. useful debugging purposes case BayesACT produce expected output.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/output.html","id":"plots","dir":"Articles","previous_headings":"Results and analysis","what":"Plots","title":"Simulation results","text":"BayesACT also produces plots show actors’ identities shift affective space course interaction. saved “output” folder BayesACT C package top level directory.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"setting-up-and-running-simulations","dir":"Articles","previous_headings":"","what":"Setting up and running simulations","title":"Setting up and running simulations","text":"three stages running BayesACT simulations: setup stage, run stage, analysis stage. setup run stages described page. information output analysis, visit results information page.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"setup-creating-input-files","dir":"Articles","previous_headings":"Setting up and running simulations","what":"Setup: Creating input files","title":"Setting up and running simulations","text":"BayesACT needs information actors, relationships one another, structure interaction. parameters provided C package via specially formatted text files. files can created hand (many examples provided BayesACT C package documentation), however, bayesactR also provides functions generate automatically. Automatic generation required input files easier running batches simulations, reproducible, less prone errors manual creation. information needed generate proper input files can divided three types: information individual actors, information actors’ initial relationships one another, information kinds events can occur simulation. Within bayesactR, information structured way parallels often used social network analysis agent based modeling. Information specific individual actors stored data frame structured like nodelist. Information relationships actors stored data frame structured like edgelist. Finally, information events stored sequentially ordered data frame, information conceptually similar algorithms define action agent-based models.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"actor-nodelist","dir":"Articles","previous_headings":"Setting up and running simulations > Setup: Creating input files","what":"Actor nodelist","title":"Setting up and running simulations","text":"actor nodelist contains information specific actor simulation. Specifically, need know sentiment dictionaries equations represent actor’s understanding world, (optionally) can define parameter values control manage uncertainty. bayesactR pairs actdata make specifying dictionaries equations easy. recommended way create nodelist generate using pair provided functions blank_nodelist() add_actor().","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"dictionaries","dir":"Articles","previous_headings":"Setting up and running simulations > Setup: Creating input files > Actor nodelist","what":"Dictionaries","title":"Setting up and running simulations","text":"actor needs four dictionaries representing () meanings identities assign , (b) meanings assign behaviors, (c) meanings identities assign interaction partners, (4) meanings assigned modifiers emotions. dictionaries can provided one three ways (mixing matching allowed): Using actdata data set keys. working publicly available ACT sentiment dictionaries equation sets, can specify dictionaries using keywords actdata package. package repository standardized version many publicly available ACT sentiment dictionaries equation data sets, bayesactR developed complement . using dictionaries /equations actdata, just provide applicable keyword dict argument. wish use different dictionaries four components, provide four dictionary keys list (eg, c(“uga2015”, “nc1978”, “uga2015”, “uga2015”)). see information available data sets gender subsets, see actdata help pages dictionaries call actdata::dict_info(). Using data frame objects. Dictionaries can provided data frame objects. particularly useful wish use subset terms public dictionary–example, perhaps want agents able take limited set behaviors, identities just one institution, rather access whole list. actdata::epa_subset() function within actdata makes creating subsets public data straightforward. can also provide data properly formatted data frame–see actdata::format_for_bayesact(), checks fixes formatting . can either provide single data frame column titled “component” used determine rows apply four categories , can provide list four data frames order (use list() rather c() create list). Using file paths. Finally, may provide filepath dictionary files. must already properly formatted BayesACT–bayesactR checking reformatting ; simply passes files directly C code. example showing syntax specifying dictionaries using data set keys. page example using data frame objects subsets public dictionaries.","code":"library(bayesactR)  # blank_nodelist() creates an empty data frame with the correct column labels nodelist <- blank_nodelist()  # add_actor() appends a line representing an actor to this data frame. If dictionaries, equations, or dict/eqn stats or genders are not specified, they will revert to defaults.  nodelist <- add_actor(nodelist,                        name = \"Ingrid\",                        dicts = \"germany2007\",                        eqns = \"germany2007\", eqns_gender = \"av\")  # To add another actor, use add_actor() again. Different parameter values can be specified for each actor. # For Felix we use the actdata keyword for the Germany 2007 sentiment dictionary and equations, and we use the values collected from men. nodelist <- add_actor(nodelist,                        name = \"Felix\",                        dicts = \"germany2007\",                        dict_gender = \"male\",                        eqns = \"germany2007\", eqns_gender = \"av\",                        alphas = 1)  knitr::kable(nodelist)"},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"a-note-about-dictionaries-and-cross-cultural-interaction","dir":"Articles","previous_headings":"","what":"Setting up and running simulations","title":"Setting up and running simulations","text":"two actors based culture, reasonable assign set dictionaries equations. two actors different cultures, may want instead assign different dictionaries equations. possible BayesACT, caveat: dictionaries actors (except modifier dictionaries) must contain sets words. set terms differs dictionaries, one agent able comprehend action performed identity assigned , BayesACT crash. recommended workaround simply subset desired dictionaries contains terms present others. actdata::epa_subset() function actdata makes kind manipulation reasonably straightforward.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"equations","dir":"Articles","previous_headings":"Setting up and running simulations > Setup: Creating input files > Actor nodelist","what":"Equations","title":"Setting up and running simulations","text":"addition dictionaries, actor also needs two sets equation coefficients: 1. Impression equation coefficients, determine ideal elements -B-O(actor-behavior-object) events. actdata, referred type “impressionabo”. 2. Emotion equation coefficients, estimate emotional reactions events. actdata, referred type “emotionid”. Similarly dictionaries, equations can provided using actdata keys, data frames, filepaths. using actdata key, also pay attention eqns_gender argument add_actor()–equation type-gender combinations available. Call eqn_info() see combinations valid. Call ?add_actor() details creating nodelist.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"other-parameters","dir":"Articles","previous_headings":"Setting up and running simulations > Setup: Creating input files > Actor nodelist","what":"Other parameters","title":"Setting up and running simulations","text":"nodelist also optional parameters control actors manage uncertainty strange situations can adjusted. parameters alpha, beta, delta. See ?add_actor() details.","code":""},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"an-example","dir":"Articles","previous_headings":"Setting up and running simulations > Setup: Creating input files > Actor nodelist","what":"An example:","title":"Setting up and running simulations","text":"example, say Sally American uses meanings one recent U.S. dictionaries. say Reem Egyptian uses meanings Egyptian dictionaries. subset U.S. Egypt dictionaries contain set identities behaviors. BayesACT takes account uncertainty around identity meanings. can represented arbitrary constant around mean values standard deviation covariance information calculated EPA measurement data. older public datasets contain mean values, recent data collections (2015 newer) also contain standard deviation covariance information. example use two recent datasets perform BayesACT simulation using covariance information contain.","code":"egypt_identity <- actdata::epa_subset(dataset = \"egypt2015\",                                        component = \"identity\",                                        gender = \"average\",                                        stat = c(\"mean\", \"cov\")) %>%    dplyr::semi_join(actdata::epa_subset(dataset = \"usfullsurveyor2015\",                                         component = \"identity\",                                         gender = \"average\"),                     by = \"term\")  us_identity <- actdata::epa_subset(dataset = \"usfullsurveyor2015\",                                     component = \"identity\",                                     gender = \"average\",                                     stat = c(\"mean\", \"cov\")) %>%    dplyr::semi_join(actdata::epa_subset(dataset = \"egypt2015\",                                         component = \"identity\",                                         gender = \"average\"),                     by = \"term\")  egypt_behavior <- actdata::epa_subset(dataset = \"egypt2015\",                                        component = \"behavior\",                                        gender = \"average\",                                        stat = c(\"mean\", \"cov\")) %>%    dplyr::semi_join(actdata::epa_subset(dataset = \"usfullsurveyor2015\",                                         component = \"behavior\",                                         gender = \"average\"),                     by = \"term\")  us_behavior <- actdata::epa_subset(dataset = \"usfullsurveyor2015\",                                     component = \"behavior\",                                     gender = \"average\",                                     stat = c(\"mean\", \"cov\")) %>%    dplyr::semi_join(actdata::epa_subset(dataset = \"egypt2015\",                                         component = \"behavior\",                                         gender = \"average\"),                     by = \"term\")  head(egypt_identity) #> # A tibble: 6 × 19 #>   term     compo…¹ dataset context year  gender instc…²     E     P     A cov_EE #>   <chr>    <chr>   <chr>   <chr>   <chr> <chr>  <chr>   <dbl> <dbl> <dbl>  <dbl> #> 1 abortio… identi… egypt2… Egypt   2015  avera… 11 000… -1.89 -0.58  0.88   5.99 #> 2 adolesc… identi… egypt2… Egypt   2015  avera… 11 100…  0.17  0.06  0.6    4.45 #> 3 adult    identi… egypt2… Egypt   2015  avera… 11 100…  1.37  0.94  0.02   3.31 #> 4 adulter… identi… egypt2… Egypt   2015  avera… 10 000… -2.99 -1.88  2.26   4.26 #> 5 adulter… identi… egypt2… Egypt   2015  avera… 01 000… -3.44 -2.19  2.14   2.3  #> 6 air_for… identi… egypt2… Egypt   2015  avera… 11 000…  2.17  1.95  0.14   3.51 #> # … with 8 more variables: cov_EP <dbl>, cov_EA <dbl>, cov_PE <dbl>, #> #   cov_PP <dbl>, cov_PA <dbl>, cov_AE <dbl>, cov_AP <dbl>, cov_AA <dbl>, and #> #   abbreviated variable names ¹​component, ²​instcodes #> # ℹ Use `colnames()` to see all variable names  # We can provide these data frames by passing a list to the dict argument.  # The order is c(agent_identity, agent_behavior, object_identity, agent_emotion). # Modifier term sets do not have to match, so instead of going to the trouble of creating modifier subsets,  # here we pass the actdata dataset key for the modifier slot instead. nodelist <- blank_nodelist() nodelist <- add_actor(nodelist,                        name = \"Sally\",                        dicts = list(us_identity, us_behavior, us_identity, \"usfullsurveyor2015\")) # Reem also uses the Egyptian equations (the default, which Sally uses, is us2010). nodelist <- add_actor(nodelist,                        name = \"Reem\",                        dicts = list(egypt_identity, egypt_behavior, egypt_identity, \"egypt2015\"),                        eqns = \"egypt2014\", eqns_gender = c(\"av\", \"f\"),                        alphas = 1)"},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"interaction-edgelist","dir":"Articles","previous_headings":"Setting up and running simulations > Setup: Creating input files","what":"Interaction edgelist","title":"Setting up and running simulations","text":"interaction edgelist contains information defines relationships actors–particular, identities ascribe alter outset interaction. process creating edgelist similar creating nodelist–call ?add_interaction() details.","code":"# creates a blank data frame with the correct column names edgelist <- blank_edgelist()  # Note that interactions are directed--how one actor views herself does not necessary match how her partner views her.  # The focal actor is referred to as the agent, and the partner is referred to as the object or client.  # Sally views herself as a teacher and Reem as a student when they interact. edgelist <- add_interaction(edgelist,                              agent = \"Sally\", object = \"Reem\",                              agent_ident = \"teacher\", agent_ident_prob = 1,                              object_ident = \"student\", object_ident_prob = 1)  # When she interacts with Sally, Reem usually sees herself as a student (p = .9) but sometimes as a genius (p = .1). She usually sees Sally as a teacher (p - .85) but occasionally as a bore (p = .15).  edgelist <- add_interaction(edgelist,                              agent = \"Reem\", object = \"Sally\",                              agent_ident = c(\"student\", \"genius\"), agent_ident_prob = c(.9, .1),                              object_ident = c(\"teacher\", \"bore\"), object_ident_prob = c(.85, .15))  knitr::kable(edgelist)"},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"event-list","dir":"Articles","previous_headings":"Setting up and running simulations > Setup: Creating input files","what":"Event list","title":"Setting up and running simulations","text":"last piece input information event list. event list data frame one line per turn simulation defines can act can turn. bayesactR provides function, basic_event_df() generating relatively simple events files actors take either BayesACT-optimal action, interact-optimal action, specific action dictionary turns. Actors must switch regular interval. possible use complex events files (see BayesACT C package documentation), simple structure suffice many applications. can also used base build complex specifications. contents file cryptic nodelist edgelist. row represents one turn simulation. turn, one actors entry action column–turn. Similarly, neither, one may entry emotion column–emotion express. Asterisks columns indicate action emotion one optimal (least deflecting) according BayesACT. Exclamation points mean optimal according affect control theory (Interact). plus sign entry indicates small amount noise added party’s perception action emotion.","code":"# Sally and Reem will take 10 turns using the default specifications: bayesact optimal actions and no emotion expression. A small amount of noise will be added to each person's perception of the other's action--this means that there is a chance actions will be misinterpreted by the observing party.  eventlist <- basic_event_df(n = 10,                              actors = c(\"Sally\", \"Reem\"),                              noise = c(\"a1_action\", \"a2_action\"))  knitr::kable(eventlist)"},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"writing-input-data-frames-to-file","dir":"Articles","previous_headings":"Setting up and running simulations","what":"Writing input data frames to file","title":"Setting up and running simulations","text":"Now created three data frames, need generate text files BayesACT C code takes input. bayesactR provides write_input_from_df() function purpose. addition three dataframes, function needs file names two text files write. sim file contains actor interaction information, must extension .txt. event file contains event information must extension .events. function also requires filepath directory houses BayesACT C package machine (see section downloading installing BayesACT C package ). default, function put text files generates directory called “bayesact_input” lives current working directory. want files saved different directory, provide filepath input_dir argument. function returns filepath saved input files.","code":"write_input_from_df(nodelist, edgelist, eventlist,                      simfilename = \"readme_simfile.txt\",                      eventfilename = \"readme_eventfile.events\",                      bayesact_dir = \"/path/to/my/bayesact/Cpackage/top/level/directory/\")"},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"running-bayesact-using-bayesactr","dir":"Articles","previous_headings":"Setting up and running simulations","what":"Running BayesACT using bayesactR","title":"Setting up and running simulations","text":"function used run simulations run_bayesact(). requires file name gave input sim file, path top level directory Bayesact C package, path directory input files saved (something “bayesact_input” working directory, default), path output saved (“bayesact_output” current working directory default). probably take minute two run (longer events).","code":"run_bayesact(simfilename = \"readme_simfile.txt\",               bayesact_dir = \"/path/to/my/bayesact/Cpackage/top/level/directory/\")"},{"path":"https://ahcombs.github.io/bayesactR/articles/run_elements.html","id":"batches-of-simulations","dir":"Articles","previous_headings":"Setting up and running simulations","what":"Batches of simulations","title":"Setting up and running simulations","text":"Now know set , run, analyze results single situation, can think efficiently scale . likely many BayesACT applications require running simulations range parameter settings, making running batches replicable way useful. functions described amenable run inside loops. Notably, may necessary recreate every dataframe every run. example, user wants run number simulations probability actor takes possible identities (agent_ident_prob interaction edgelist) varies, edgelist needs modified. nodelist events file can created passed write_input_from_df() repeatedly.","code":"# What happens if the probability that Reem sees Sally as a teacher versus a bore varies? Let's run 5 simulations with different values of object_ident_prob to find out. # This is defined in the edgelist, so the nodelist and events files can just be created once. This code is the same as used above.   nodelist <- blank_nodelist() nodelist <- add_actor(nodelist,                        name = \"Sally\",                        dicts = list(us_identity, us_behavior, us_identity, \"usfullsurveyor2015\")) nodelist <- add_actor(nodelist,                        name = \"Reem\",                        dicts = list(egypt_identity, egypt_behavior, egypt_identity, \"egypt2015\"),                        eqns = \"egypt2014\", eqns_gender = c(\"av\", \"f\"),                        alphas = 1)  eventlist <- basic_event_df(n = 6,                              actors = c(\"Sally\", \"Reem\"),                              noise = c(\"a1_action\", \"a2_action\"))  # We need to create a different edgelist for each of the simulations and write out different input files for each as well. We will do this in a for loop.  # the list of probabilities of Reem seeing Sally as a teacher that we will loop over p_teacher = seq(.05, .95, .2)  for(i in 1:5){   this_p_teacher <- p_teacher[i]   # the probabilities of all identities combined must always sum to 1   this_p_bore <- 1 - this_p_teacher         edgelist <- blank_edgelist()   edgelist <- add_interaction(edgelist,                                agent = \"Sally\", object = \"Reem\",                                agent_ident = \"teacher\", agent_ident_prob = 1,                                object_ident = \"student\", object_ident_prob = 1)   edgelist <- add_interaction(edgelist,                                agent = \"Reem\", object = \"Sally\",                                agent_ident = c(\"student\", \"genius\"), agent_ident_prob = c(.9, .1),                                object_ident = c(\"teacher\", \"bore\"), object_ident_prob = c(this_p_teacher, this_p_bore))      # each simulation file needs a different name   simname <- paste0(\"readme_simfile_batch_\", i, \".txt\")      # write out input files   write_input_from_df(nodelist, edgelist, eventlist,                        simfilename = simname,                        eventfilename = \"readme_eventfile_batch.events\",                        bayesact_dir = \"/path/to/my/bayesact/Cpackage/top/level/directory/\")      # run the current simulation   run_bayesact(simname, bayesact_dir = \"/path/to/my/bayesact/Cpackage/top/level/directory/\") }"},{"path":"https://ahcombs.github.io/bayesactR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aidan Combs. Author, maintainer.","code":""},{"path":"https://ahcombs.github.io/bayesactR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Combs (2022). bayesactR: Functions Running BayesACT Simulations Using R Workflow. R package version 0.0.0.9003, https://ahcombs.github.io/bayesactR/.","code":"@Manual{,   title = {bayesactR: Functions for Running BayesACT Simulations Using an R Workflow},   author = {Aidan Combs},   year = {2022},   note = {R package version 0.0.0.9003},   url = {https://ahcombs.github.io/bayesactR/}, }"},{"path":"https://ahcombs.github.io/bayesactR/index.html","id":"bayesactr","dir":"","previous_headings":"","what":"Functions for Running BayesACT Simulations Using an R Workflow","title":"Functions for Running BayesACT Simulations Using an R Workflow","text":"bayesactR provides utilities allow R users run simulations using C package BayesACT, developed Dr. Jesse Hoey colleagues, entirely within R. Visit Getting Started page installation information. examples set run simulations, visit help page.","code":""},{"path":"https://ahcombs.github.io/bayesactR/index.html","id":"bayesian-affect-control-theory","dir":"","previous_headings":"","what":"Bayesian Affect Control Theory","title":"Functions for Running BayesACT Simulations Using an R Workflow","text":"BayesACT, developed Drs. Jesse Hoey, Tobias Schröder, Kimberly Rogers, colleagues, theoretical extension affect control theory. short summary affect control theory (ACT) BayesACT provided . See affectcontroltheory.org, Schröder, Hoey, Rogers (2016), bayesact.ca information. ACT social psychological theory interaction models affective meanings people behaviors relate expect happen situation. Within ACT, words describing people behaviors modeled locations three-dimensional space affective meaning. dimensions evaluation (good/bad), potency (powerful/weak), activity (active/quiet), range approximately -4 4. affective meanings measured empirically number data collection efforts across several different countries since 1960s. example, one recent data collection, word teacher found seen average extremely good (E = 2.62), quite powerful (P = 1.82) slightly active (= 1.3). values can used run simulations interactions results simulations can tell us kinds behaviors expect particular kinds people engage , expect people certain things labeled, strange particular social interactions seem us, . results can verified comparisons empirical data. mathematics core theory, meanings treated points three-dimensional meaning space. BayesACT, contrast, treats Gaussian distributions, mean variance. Simulations BayesACT probabilistic. run, values sampled distributions relevant terms, results determined based sampled values. output BayesACT simulation compilation summary results across number individual runs.","code":""},{"path":"https://ahcombs.github.io/bayesactR/index.html","id":"why-bayesactr","dir":"","previous_headings":"","what":"Why bayesactR?","title":"Functions for Running BayesACT Simulations Using an R Workflow","text":"Hoey colleagues developed released implementation BayesACT written C designed interfaced via command line. bayesactR R wrapper tool. goals bayesactR (1) make BayesACT accessible social scientists prefer R-based rather command-line-based workflows, (2) make setting running multiple simulations one time simpler, (3) facilitate creating analytic workflows easily reproducible.","code":""},{"path":"https://ahcombs.github.io/bayesactR/index.html","id":"this-is-a-work-in-progress","dir":"","previous_headings":"","what":"This is a work in progress!","title":"Functions for Running BayesACT Simulations Using an R Workflow","text":"current version bayesactR designed work BayesACT C 2.3.8, last modified June 19, 2021. package currently early-stage beta state. Key functionality implemented worked local tests, testing contexts far limited. particular, development testing package far done MacOS (11.2.3 - 12.3.1). Development ongoing, can’t promise won’t breaking changes future versions. ask bear work towards goal developing tool flexible, useful, user-friendly possible! Please get touch (ahc26atduke.edu) encounter bugs confusions thoughts might made useful tool. feedback helpful appreciated!","code":""},{"path":"https://ahcombs.github.io/bayesactR/index.html","id":"you-may-also-be-interested-in","dir":"","previous_headings":"","what":"You may also be interested in…","title":"Functions for Running BayesACT Simulations Using an R Workflow","text":"package developed conjunction two open-source R packages may also interest ACT research community. Together, goal packages make ACT research accessible, make possible use R analysis self-contained completely reproducible transparent way. inteRact: Like bayesactR, inteRact, developed maintained Em Maloney, package allows users run affect control theory simulations R. built open source, R-based version namesake Java program, INTERACT, used researchers run affect control theory simulations since 1990s. conceptual difference inteRact bayesactR inteRact runs simulations using mathematics core theory, rather Bayesian extension. nutshell, means treats EPA values points, rather distributions, simulations deterministic rather probabilistic. simulations much less computationally intensive BayesACT simulations, easier set run. However, fewer adjustable parameters less useful kinds research questions. actdata: actdata, develop maintain, R package serves data repository. ACT research community long commendable history making tools data publicly available. package provides data standardized format alongside functions help users search, subset, export format works analysis program choice. makes unnecessary researchers store local copies publicly available data, greatly simplifies process comparing values across cultures time periods. bayesactR inteRact use actdata supply data simulations.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/absolute_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert relative paths to absolute paths — absolute_path","title":"Convert relative paths to absolute paths — absolute_path","text":"First checks path relative absolute, relative prepends wd (given absolute path)","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/absolute_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert relative paths to absolute paths — absolute_path","text":"","code":"absolute_path(path, wd = getwd())"},{"path":"https://ahcombs.github.io/bayesactR/reference/absolute_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert relative paths to absolute paths — absolute_path","text":"path path check convert absolute wd path prepend relative path. Current working directory default.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/absolute_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert relative paths to absolute paths — absolute_path","text":"absolute path","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_actor.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an actor line to a actor nodelist data frame — add_actor","title":"Add an actor line to a actor nodelist data frame — add_actor","text":"nodelist data frame contains information actors simulation, including names EPA dictionaries equations. Actors also optional parameters control manage uncertainty interactions.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_actor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an actor line to a actor nodelist data frame — add_actor","text":"","code":"add_actor(   nodelist,   name,   dicts = \"usfullsurveyor2015\",   dict_stat = \"mean\",   dict_gender = \"av\",   dict_file_prefix = \"dict\",   eqns = \"us2010\",   eqns_gender = c(\"av\", \"female\"),   alphas = NA,   betas = NA,   deltas = NA,   numsamples = NA )"},{"path":"https://ahcombs.github.io/bayesactR/reference/add_actor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an actor line to a actor nodelist data frame — add_actor","text":"nodelist data frame add actor line name string use actor's name dicts one several options (see Details): 1a: dictionary key actdata. Data pulled package split four required components based component column. 1b: list four dictionary keys actdata used , order, identities, behaviors, partner identities, emotions. key may used one category. 2a: EPA data frame \"component\" column used split list length 4 following order. 2b: list four EPA data frames order: identities, behaviors, partner identities, emotions. Use \"list()\", rather \"c()\", construct list. 3: list four file paths csv files containing required dictionaries. dict_stat string string list length 4: stat provided dictionaries (mean, cov, sd). data sets actdata, check available stats actdata::dict_info(). dict_gender string string list length 4: gender provided dictionaries (av, female, male). data sets actdata, check available genders actdata::dict_info(). dict_file_prefix prefix append dictionary data files written . Default \"dict.\" eqns string string list length 2 providing equations use. See Details. Entries must either equation keys actdata package valid filepaths coefficient matrices. provided length 2 list, first entry used impression ABO coefficients second emotion coefficients. single entry (possible coefficients actdata), function attempts find two components . eqns_gender string string list length 2: gender equations use (av, female, male). datasets actdata, check available genders actdata::eqn_info(). error thrown specified equation set available specified gender. alphas numeric numeric list length 3: alpha value(s) use. See Details. betas numeric numeric list length 2: beta value(s) use. See Details. deltas numeric numeric list length 2: delta value(s) use. See Details. numsamples numeric: number samples used actor interaction. Default 1000.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_actor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an actor line to a actor nodelist data frame — add_actor","text":"provided nodelist actor line appended","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_actor.html","id":"dictionaries-and-equations","dir":"Reference","previous_headings":"","what":"Dictionaries and equations","title":"Add an actor line to a actor nodelist data frame — add_actor","text":"actor needs four dictionaries representing: EPA values identities assign EPA values assign behaviors valid within interaction EPA values identities assign interaction partners EPA values assign modifiers emotions. also need two sets equation coefficients: Impression equation coefficients determine ideal elements -B-O (actor-behavior-object) events. actdata, referred \"impressionabo\" keyword. Emotion equation coefficients estimate emotional reactions events. actdata, referred \"emotionid\" keyword. dictionaries equations can provided one three ways (mixing matching allowed): working publicly available ACT sentiment dictionaries equation sets, dictionaries may specified using keywords actdata package. package repository standardized versions many publicly available ACT sentiment dictionaries equation sets, bayesactR developed complement . using dictionaries /equations actdata, provide applicable keyword dict eqns argument. see information available data sets gender subsets, see package readme call actdata::dict_info() actdata::eqn_info(). Dictionaries can also provided data frame objects. particularly useful wish use subset terms public dictionary–example, perhaps want agents able take limited set behaviors, identities just one institution, rather access whole list. actdata::epa_subset() function within actdata makes creating subsets public data straightforward. collected estimated data otherwise access non-public data sets, may provide filepath dictionary equation files dict eqns arguments. must properly formatted BayesACT. provided filepaths, bayesactR passes directly BayesACT formatting checks changes. See also actdata::format_for_bayesact(), can help reformat datasets correctly.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_actor.html","id":"parameters-alpha-beta-and-delta","dir":"Reference","previous_headings":"","what":"Parameters alpha, beta, and delta","title":"Add an actor line to a actor nodelist data frame — add_actor","text":"three parameters control actors tend respond interactions. case, parameters can set separately relevant elements situation (actor, behavior, client/object), can provided single number applied across elements. information parameters, see BayesACT Version 2: Technical Users Manual, available BayesACT C directory subdirectory bayesact/docs/. following summary description found . Alpha (set three values alpha_a, alpha_b, alpha_c) represents strength affect control principle (higher value weaker; default 0.1). Beta (set two values beta_a beta_c) represents identity sentiment inertia, stable expect EPA values identities remain time. Default 0.01. Delta (set two values delta_a delta_c) represents denotative identity stability, likely someone relabeled. Default 0.1. actor given optional arguments (alphas, betas, deltas, numsamples) already columns data frame, columns added.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_actor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an actor line to a actor nodelist data frame — add_actor","text":"","code":"nodelist <- blank_nodelist() nodelist <- add_actor(nodelist, name = \"Sally\", dict_stat = \"cov\") nodelist <- add_actor(nodelist, name = \"Reem\", dicts = \"egypt2015\", dict_stat = \"cov\",     eqns = \"egypt2014\") nodelist <- add_actor(nodelist, name = \"Jamal\",     dicts = c(\"indiana2003\", \"usmturk2015\", \"indiana2003\", \"indiana2003\"), alphas = .5)"},{"path":"https://ahcombs.github.io/bayesactR/reference/add_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an interaction line to the edgelist — add_interaction","title":"Add an interaction line to the edgelist — add_interaction","text":"edgelist data frame containing information relationships actors, including identities inhabit interactions one another labels ascribe . function adds line, representing directed relationship one actor another, edgelist data frame created blank_edgelist().","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an interaction line to the edgelist — add_interaction","text":"","code":"add_interaction(   edgelist,   agent,   object,   agent_ident = c(\"friend\", \"person\"),   agent_ident_prob = c(0.5, 0.5),   object_ident = c(\"friend\", \"person\"),   object_ident_prob = c(0.5, 0.5),   institution = NA,   rseed = NA )"},{"path":"https://ahcombs.github.io/bayesactR/reference/add_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an interaction line to the edgelist — add_interaction","text":"edgelist interaction edgelist add agent string agent's name object string object's name agent_ident string string list: agent's label(s) identity outset interaction. multiple provided, agent chooses one , probability chosen taken agent_ident_prob argument. Default c(\"friend\", \"person\"). agent_ident_prob numeric numeric list summing 1: probability taking identity agent_ident. Default c(.5, .5). object_ident string string list: agent's label(s) object's identity outset interaction. multiple provided, agent chooses one , probability chosen taken object_ident_prob argument. Default c(\"friend\", \"person\"). object_ident_prob numeric numeric list summing 1: probability taking identity object_ident. Default c(.5, .5). institution string string list: institution(s) identities relationship can come . Valid institutions lay, business, law, politics, academe, medicine, religion, family, sexual, monadic, group, corporal, male, female (see actdata details). Default NA, allows institutions. rseed optional seed value ensure identical simulation results repeated runs.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an interaction line to the edgelist — add_interaction","text":"edgelist data frame added interaction line","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_interaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an interaction line to the edgelist — add_interaction","text":"edgelist line can considered define relationship two actors, agent object, simulation perspective agent. agent label (multiple possible labels) identity, possible label(s) object's identity. list multiple identities provided either agent object, agent randomly select one provided identities simulation repetition. case, selection probabilities given agent_ident_prob object_ident_prob. edgelist line represents situation perspective just one actor (agent), dyadic relationship simulation requires two edgelist lines: one perspective actor. Actors might agree identities--example, may agree person 1 act \"sister\" person 2 act \"brother\". case two edgelist lines mirror images . Actors may also begin interactions disagreement identities--person 1 may see \"sister\" see person 2 \"brother,\" person 2 may instead see person 1 \"bully\" \"victim.\" possible person 1 knows person 2 person 2 know person 1. case, two edgelist lines still required. However, object_ident object_ident_prob person 2 (representing initial label person 1) empty string \"\". identities starting points simulation. Identities may shift course interaction generally may take value represented identity dictionaries provided nodelist. wish restrict possible values, may remove dictionary provided , use optional \"institution\" argument function restrict identities apply particular social contexts. interaction given optional arguments (institution, rseed) already columns provided dataframe, columns added.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an interaction line to the edgelist — add_interaction","text":"","code":"edgelist <- blank_edgelist() edgelist <- add_interaction(edgelist, agent = \"Sally\", object = \"Reem\",     agent_ident = \"teacher\", agent_ident_prob = 1,     object_ident = c(\"student\", \"troublemaker\"), object_ident_prob = c(.8, .2)) edgelist <- add_interaction(edgelist, agent = \"Reem\", object = \"Sally\",     agent_ident = c(\"student\", \"teenager\"), agent_ident_prob = c(.3, .7),     object_ident = \"bore\", object_ident_prob = 1) edgelist <- add_interaction(edgelist, agent = \"Jamal\", object = \"Sam\",     agent_ident = \"boss\", agent_ident_prob = 1,     object_ident = c(\"employee\", \"friend\", \"do_nothing\"), object_ident_prob = c(.5, .25, .25),     institution = \"business\") edgelist <- add_interaction(edgelist, agent = \"Sam\", object = \"Jamal\",     agent_ident = \"employee\", agent_ident_prob = 1,     object_ident = \"\", object_ident_prob = \"\",     institution = \"business\")"},{"path":"https://ahcombs.github.io/bayesactR/reference/add_leading_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading zero before decimal point to vectors of numbers if necessary — add_leading_zeros","title":"Add leading zero before decimal point to vectors of numbers if necessary — add_leading_zeros","text":"Add leading zero decimal point vectors numbers necessary","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_leading_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading zero before decimal point to vectors of numbers if necessary — add_leading_zeros","text":"","code":"add_leading_zeros(vec)"},{"path":"https://ahcombs.github.io/bayesactR/reference/add_leading_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading zero before decimal point to vectors of numbers if necessary — add_leading_zeros","text":"vec vector possibly decimal numbers","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/add_leading_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading zero before decimal point to vectors of numbers if necessary — add_leading_zeros","text":"formatted character vector leading zero decimal","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Write agent into input — agent","title":"Write agent into input — agent","text":"Compile necessary information individual agent add template object can written text file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write agent into input — agent","text":"","code":"agent(   name,   bayesact_dir,   dict = \"usfullsurveyor2015\",   dict_stat = \"mean\",   dict_gender = \"average\",   eqns = \"us2010\",   eqns_gender = c(\"av\", \"female\"),   opt_args = \"\" )"},{"path":"https://ahcombs.github.io/bayesactR/reference/agent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write agent into input — agent","text":"name string agent name bayesact_dir top level directory bayesact code lives dict string length 4 vector, key(s) available dictionary filepaths data frames. file paths data frames, must length 4 vector. dict_stat string length 4 vector (\"mean\", \"sd\", \"cov\") dict_gender string length 4 vector (\"average\", \"male\", \"female\") eqns string length 2 vector, key(s) available equation set filepath(s). First gender impression ABO equation, second gender emotion equation. eqns_gender string length 2 vector (\"av\", \"f\", \"m\"). First gender impression ABO equation, second gender emotion equation. opt_args agent-level parameters may may included","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write agent into input — agent","text":"file inserted lines","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/basic_event_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an events file for a dyad — basic_event_df","title":"Generate an events file for a dyad — basic_event_df","text":"function constructs events dataframe proper format inputting write_input_from_df. constructs basic dataframes . limited two actors must act patterned ways perform one type action throughout interaction. can optimal action calculated bayesact interact can action behaviors dictionary. possible simulate interaction larger network structures complex patterns action. Dataframes created function may useful templates creating complicated events files needed .","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/basic_event_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an events file for a dyad — basic_event_df","text":"","code":"basic_event_df(   n,   actors,   a1_action = \"bayesact_optimal\",   a2_action = \"bayesact_optimal\",   a1_emotion = \"none\",   a2_emotion = \"none\",   noise = \"none\",   act_simultaneously = FALSE,   perspective_shift = TRUE,   switch_actor_after = 1 )"},{"path":"https://ahcombs.github.io/bayesactR/reference/basic_event_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an events file for a dyad — basic_event_df","text":"n numeric; number turns actors string vector length 2; names agents a1 a2 a1_action, a2_action string; one \"bayesact_optimal\", \"interact_optimal\", action dictionary. Default \"bayesact_optimal\". a1_emotion, a2_emotion string; one \"none\", \"bayesact_optimal\", \"interact_optimal\", modifier modifier dictionary. Default \"none\". noise string vector listing places noise desired. Options \"none\" (default), \"a1_action\", \"a1_emotion\", \"a2_action\", \"a2_emotion\" act_simultaneously logical; whether actors act time. Default FALSE--case, instead take turns. perspective_shift logical; whether switch actor agent/client turn switches. true (default), \"perspective\" bayesact always agent's point view. false, perspective always one actor's point view. switch_actor_after numeric; many actions actor take switching. Default 1. act_simultaneously TRUE, ignored.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/basic_event_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an events file for a dyad — basic_event_df","text":"dataframe listing events","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/basic_event_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an events file for a dyad — basic_event_df","text":"","code":"basic_event_df(10, actors = c(\"Sally\", \"Reem\")) #>    agent agent_action agent_emotion object object_action object_emotion #> 1  Sally            *                 Reem                              #> 2   Reem            *                Sally                              #> 3  Sally            *                 Reem                              #> 4   Reem            *                Sally                              #> 5  Sally            *                 Reem                              #> 6   Reem            *                Sally                              #> 7  Sally            *                 Reem                              #> 8   Reem            *                Sally                              #> 9  Sally            *                 Reem                              #> 10  Reem            *                Sally                              basic_event_df(2, actors = c(\"Jamal\", \"Sam\"), a1_action = \"greet\", a2_action = \"bayesact_optimal\",     noise = c(\"a1_action\", \"a2_action\")) #>   agent agent_action agent_emotion object object_action object_emotion #> 1 Jamal       greet+                  Sam                              #> 2   Sam           *+                Jamal                              basic_event_df(7, actors = c(\"Sally\", \"Reem\"),     noise = c(\"a1_action\", \"a2_action\"), perspective_shift = FALSE,     switch_actor_after = 2) #>   agent agent_action agent_emotion object object_action object_emotion #> 1 Sally           *+                 Reem                              #> 2 Sally           *+                 Reem                              #> 3 Sally                              Reem            *+                #> 4 Sally                              Reem            *+                #> 5 Sally           *+                 Reem                              #> 6 Sally           *+                 Reem                              #> 7 Sally                              Reem            *+                basic_event_df(4, actors = c(\"Jamal\", \"Sam\"),     a1_action = \"greet\", a2_action = \"bayesact_optimal\",     a1_emotion = \"excited\", a2_emotion = \"tired\",     noise = c(\"a1_action\", \"a2_action\", \"a1_emotion\", \"a2_emotion\")) #>   agent agent_action agent_emotion object object_action object_emotion #> 1 Jamal       greet+      excited+    Sam                              #> 2   Sam           *+        tired+  Jamal                              #> 3 Jamal       greet+      excited+    Sam                              #> 4   Sam           *+        tired+  Jamal"},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a blank interaction edgelist data frame — blank_edgelist","title":"Create a blank interaction edgelist data frame — blank_edgelist","text":"edgelist data frame containing information relationships actors, including identities inhabit interactions one another labels ascribe . function returns blank edgelist properly named columns. Lines can added using add_interaction() (recommended) manually.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a blank interaction edgelist data frame — blank_edgelist","text":"","code":"blank_edgelist(use.institution = FALSE, use.rseed = FALSE)"},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a blank interaction edgelist data frame — blank_edgelist","text":"use.institution logical indicating whether include institution column use.rseed logical indicating whether include rseed column","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a blank interaction edgelist data frame — blank_edgelist","text":"Empty edgelist data frame correct column names","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a blank interaction edgelist data frame — blank_edgelist","text":"","code":"blank_edgelist() #> [1] agent             object            agent_ident       agent_ident_prob  #> [5] object_ident      object_ident_prob #> <0 rows> (or 0-length row.names) blank_edgelist(use.institution = TRUE) #> [1] agent             object            agent_ident       agent_ident_prob  #> [5] object_ident      object_ident_prob institution       #> <0 rows> (or 0-length row.names) blank_edgelist(use.rseed = TRUE) #> [1] agent             object            agent_ident       agent_ident_prob  #> [5] object_ident      object_ident_prob rseed             #> <0 rows> (or 0-length row.names)"},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a blank actor nodelist data frame — blank_nodelist","title":"Create a blank actor nodelist data frame — blank_nodelist","text":"nodelist data frame contains information actors simulation, including names EPA dictionaries equations use. function creates blank nodelist. Actor lines can added add_actor() (recommended) manually.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a blank actor nodelist data frame — blank_nodelist","text":"","code":"blank_nodelist(   use.alphas = FALSE,   use.betas = FALSE,   use.deltas = FALSE,   use.numsamples = FALSE )"},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_nodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a blank actor nodelist data frame — blank_nodelist","text":"use.alphas, use.betas, use.deltas logical indicating whether include columns alpha, beta, delta parameters. default FALSE. See BayesACT C documentation information parameters. use.numsamples logical indicating whether include numsamples column. See BayesACT C documentation information parameter.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_nodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a blank actor nodelist data frame — blank_nodelist","text":"Empty nodelist data frame correct column names","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/blank_nodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a blank actor nodelist data frame — blank_nodelist","text":"","code":"blank_nodelist() #> [1] name        dict        dict_stat   dict_gender eqns        eqns_gender #> <0 rows> (or 0-length row.names) blank_nodelist(use.alphas = TRUE, use.numsamples = TRUE) #> [1] name        dict        dict_stat   dict_gender eqns        eqns_gender #> [7] alphas      numsamples  #> <0 rows> (or 0-length row.names) blank_nodelist(use.alphas = TRUE, use.betas = TRUE, use.deltas = TRUE) #> [1] name        dict        dict_stat   dict_gender eqns        eqns_gender #> [7] alphas      betas       deltas      #> <0 rows> (or 0-length row.names)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_abbrev.html","id":null,"dir":"Reference","previous_headings":"","what":"Check abbreviation validity — check_abbrev","title":"Check abbreviation validity — check_abbrev","text":"Check abbreviation validity","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_abbrev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check abbreviation validity — check_abbrev","text":"","code":"check_abbrev(value, allowed)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_abbrev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check abbreviation validity — check_abbrev","text":"value entry check allowed list allowed abbreviations/alternate spellings","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_abbrev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check abbreviation validity — check_abbrev","text":"logical indicating success","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_agent_opt_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check agent optional argument input — check_agent_opt_args","title":"Check agent optional argument input — check_agent_opt_args","text":"institution, alphas, betas, deltas, numsamples","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_agent_opt_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check agent optional argument input — check_agent_opt_args","text":"","code":"check_agent_opt_args(opt_args)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_agent_opt_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check agent optional argument input — check_agent_opt_args","text":"opt_args named vector provided optional arguments","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_agent_opt_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check agent optional argument input — check_agent_opt_args","text":"logical successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility check: dictionary and component — check_dict_components","title":"Compatibility check: dictionary and component — check_dict_components","text":"checks provided dictionary indeed exist required component (identity, behavior, modifier).","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility check: dictionary and component — check_dict_components","text":"","code":"check_dict_components(dictname, indices = c(1, 2, 3, 4))"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility check: dictionary and component — check_dict_components","text":"dictname length 4 list, order: identity, behavior, identity, mod","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compatibility check: dictionary and component — check_dict_components","text":"boolean successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_gender.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility check: dictionary and gender — check_dict_gender","title":"Compatibility check: dictionary and gender — check_dict_gender","text":"checks provided dictionary requested gender (included dict). look different things provided list versus singular.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_gender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility check: dictionary and gender — check_dict_gender","text":"","code":"check_dict_gender(dictname, gender, indices = c(1, 2, 3, 4))"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_gender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility check: dictionary and gender — check_dict_gender","text":"dictname string length 4 vector gender string length 4 vector (\"av\", \"m\", \"f\")","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_gender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compatibility check: dictionary and gender — check_dict_gender","text":"boolean successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility check: dictionary and stat — check_dict_stat","title":"Compatibility check: dictionary and stat — check_dict_stat","text":"checks provided dictionary provided stat. look different dictionaries accessed keywords dictionaries provided filepath.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility check: dictionary and stat — check_dict_stat","text":"","code":"check_dict_stat(dict, dictstat, indices = c(1, 2, 3, 4))"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility check: dictionary and stat — check_dict_stat","text":"dictstat string (\"mean\", \"sd\", \"cov\") dictname string","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_dict_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compatibility check: dictionary and stat — check_dict_stat","text":"boolean successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Check events file input for format errors — check_events","title":"Check events file input for format errors — check_events","text":"Check events file input format errors","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check events file input for format errors — check_events","text":"","code":"check_events(events)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check events file input for format errors — check_events","text":"events dataframe","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check events file input for format errors — check_events","text":"logical successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_exit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether BayesACT completed successfully and print a warning if not. — check_exit","title":"Check whether BayesACT completed successfully and print a warning if not. — check_exit","text":"Check whether BayesACT completed successfully print warning .","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_exit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether BayesACT completed successfully and print a warning if not. — check_exit","text":"","code":"check_exit(termId, outfile)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_exit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether BayesACT completed successfully and print a warning if not. — check_exit","text":"termId terminal process id outfile path terminal output file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_identity_prob_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all identities have a corresponding probability and vice versa — check_identity_prob_match","title":"Check that all identities have a corresponding probability and vice versa — check_identity_prob_match","text":"lists length?","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_identity_prob_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all identities have a corresponding probability and vice versa — check_identity_prob_match","text":"","code":"check_identity_prob_match(ident, prob)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_identity_prob_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all identities have a corresponding probability and vice versa — check_identity_prob_match","text":"ident identity list prob probability list","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_identity_prob_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all identities have a corresponding probability and vice versa — check_identity_prob_match","text":"logical successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_input_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Check input for agreement with provided lists — check_input_list","title":"Check input for agreement with provided lists — check_input_list","text":"checks filepaths valid, check whether file contents required. assume BayesACT ?","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_input_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check input for agreement with provided lists — check_input_list","text":"","code":"check_input_list(   input,   allowlist,   allowlength,   allowsingle,   allowfile = FALSE,   checkindex = NA )"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_input_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check input for agreement with provided lists — check_input_list","text":"input vector allowlist vector allowlength numeric allowsingle logical allowfile logical checkindex numeric, index verify list length greater one. Default NA meaning indices verified.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_input_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check input for agreement with provided lists — check_input_list","text":"boolean true successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_interaction_opt_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check institution optional arguments — check_interaction_opt_args","title":"Check institution optional arguments — check_interaction_opt_args","text":"Check institution optional arguments","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_interaction_opt_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check institution optional arguments — check_interaction_opt_args","text":"","code":"check_interaction_opt_args(opt_args)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_interaction_opt_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check institution optional arguments — check_interaction_opt_args","text":"opt_args named list optional arguments","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_interaction_opt_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check institution optional arguments — check_interaction_opt_args","text":"logical successful check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that probabilities given sum to 1 — check_probs","title":"Check that probabilities given sum to 1 — check_probs","text":"Check probabilities given sum 1","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that probabilities given sum to 1 — check_probs","text":"","code":"check_probs(agent_ident_prob, object_ident_prob)"},{"path":"https://ahcombs.github.io/bayesactR/reference/check_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that probabilities given sum to 1 — check_probs","text":"agent_ident_prob list agent probabilities object_ident_prob list object probabilities","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/check_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that probabilities given sum to 1 — check_probs","text":"boolean successful test","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/component_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a given data frame into identity, behavior, and modifier components, if possible. Return error if not. — component_split","title":"Split a given data frame into identity, behavior, and modifier components, if possible. Return error if not. — component_split","text":"Split given data frame identity, behavior, modifier components, possible. Return error .","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/component_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a given data frame into identity, behavior, and modifier components, if possible. Return error if not. — component_split","text":"","code":"component_split(df)"},{"path":"https://ahcombs.github.io/bayesactR/reference/component_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a given data frame into identity, behavior, and modifier components, if possible. Return error if not. — component_split","text":"df given object","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/component_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a given data frame into identity, behavior, and modifier components, if possible. Return error if not. — component_split","text":"list length 4--identity, behavior, identity, modifier","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/construct_df_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a key and assorted information OR a dataframe, construct and return a sensible file name. — construct_df_filename","title":"Given a key and assorted information OR a dataframe, construct and return a sensible file name. — construct_df_filename","text":"format \"key_gender_component_stat.csv\" dict provided via actdata key, \"dfname.csv\" dict provided dataframe.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/construct_df_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a key and assorted information OR a dataframe, construct and return a sensible file name. — construct_df_filename","text":"","code":"construct_df_filename(   df = NA,   key = \"\",   gender = \"\",   component = \"\",   stat = \"\" )"},{"path":"https://ahcombs.github.io/bayesactR/reference/construct_df_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a key and assorted information OR a dataframe, construct and return a sensible file name. — construct_df_filename","text":"df dataframe object key key string gender gender string component component string stat stat string","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/construct_df_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a key and assorted information OR a dataframe, construct and return a sensible file name. — construct_df_filename","text":"string filename","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/construct_df_filename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Given a key and assorted information OR a dataframe, construct and return a sensible file name. — construct_df_filename","text":"dictionaries csvs","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/create_dir_if_needed.html","id":null,"dir":"Reference","previous_headings":"","what":"Create directory if it doesn't already exist — create_dir_if_needed","title":"Create directory if it doesn't already exist — create_dir_if_needed","text":"Create directory already exist","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/create_dir_if_needed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create directory if it doesn't already exist — create_dir_if_needed","text":"","code":"create_dir_if_needed(dir)"},{"path":"https://ahcombs.github.io/bayesactR/reference/create_dir_if_needed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create directory if it doesn't already exist — create_dir_if_needed","text":"dir path directory","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/create_dir_if_needed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create directory if it doesn't already exist — create_dir_if_needed","text":"logical whether directory needed created ","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/dict_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether an entry is a valid file, a valid actdata key, or a correctly formatted dataset. Throws an error otherwise. — dict_specs","title":"Checks whether an entry is a valid file, a valid actdata key, or a correctly formatted dataset. Throws an error otherwise. — dict_specs","text":"Checks whether entry valid file, valid actdata key, correctly formatted dataset. Throws error otherwise.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/dict_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether an entry is a valid file, a valid actdata key, or a correctly formatted dataset. Throws an error otherwise. — dict_specs","text":"","code":"dict_specs(dict)"},{"path":"https://ahcombs.github.io/bayesactR/reference/dict_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether an entry is a valid file, a valid actdata key, or a correctly formatted dataset. Throws an error otherwise. — dict_specs","text":"dict object test","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/dict_specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether an entry is a valid file, a valid actdata key, or a correctly formatted dataset. Throws an error otherwise. — dict_specs","text":"character. file, key, df.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/event_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Create events line for input file — event_lines","title":"Create events line for input file — event_lines","text":"Create events line input file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/event_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create events line for input file — event_lines","text":"","code":"event_lines(events, filepath)"},{"path":"https://ahcombs.github.io/bayesactR/reference/event_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create events line for input file — event_lines","text":"events list events filepath filepath save ","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/event_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create events line for input file — event_lines","text":"line character vector","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/eventfile_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Write out event file — eventfile_out","title":"Write out event file — eventfile_out","text":"Write event file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/eventfile_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write out event file — eventfile_out","text":"","code":"eventfile_out(template, filename, dir)"},{"path":"https://ahcombs.github.io/bayesactR/reference/eventfile_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write out event file — eventfile_out","text":"template event dataframe filename filename save dir directory name save ","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/eventfile_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write out event file — eventfile_out","text":"filepath saved ","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand string into vector of given length for line spec — expand","title":"Expand string into vector of given length for line spec — expand","text":"object passed already vector, change","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand string into vector of given length for line spec — expand","text":"","code":"expand(s, len)"},{"path":"https://ahcombs.github.io/bayesactR/reference/expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand string into vector of given length for line spec — expand","text":"s string/vector len desired length","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand string into vector of given length for line spec — expand","text":"vector desired length","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/extract_dict_list.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_dict_list — extract_dict_list","title":"extract_dict_list — extract_dict_list","text":"Handles dict input nodelist tibbles. can : list containing one tibble four rows containing four strings (actdata keys filepaths) list four tibbles representing dictionaries (df passed) mix two formats","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/extract_dict_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_dict_list — extract_dict_list","text":"","code":"extract_dict_list(input)"},{"path":"https://ahcombs.github.io/bayesactR/reference/extract_dict_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_dict_list — extract_dict_list","text":"input input passed nodelist df","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/extract_dict_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_dict_list — extract_dict_list","text":"list four string entries tibble four nested tibble entries","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/extract_dict_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"extract_dict_list — extract_dict_list","text":"checked validity ; happens later. TODO: Think whether check moved (possibly nodelist creation).","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/fileinput.html","id":null,"dir":"Reference","previous_headings":"","what":"Path check — fileinput","title":"Path check — fileinput","text":"checks string valid file path. returns boolean value vector boolean values (vector passed )","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/fileinput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path check — fileinput","text":"","code":"fileinput(dictname)"},{"path":"https://ahcombs.github.io/bayesactR/reference/fileinput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Path check — fileinput","text":"dictname string check","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/fileinput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path check — fileinput","text":"boolean","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/fileinput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Path check — fileinput","text":"TODO: look? relative paths work?","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_actor_prob_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility for building a line in the interaction section of the input file — get_actor_prob_line","title":"Utility for building a line in the interaction section of the input file — get_actor_prob_line","text":"Utility building line interaction section input file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_actor_prob_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility for building a line in the interaction section of the input file — get_actor_prob_line","text":"","code":"get_actor_prob_line(identities, probs)"},{"path":"https://ahcombs.github.io/bayesactR/reference/get_actor_prob_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility for building a line in the interaction section of the input file — get_actor_prob_line","text":"identities list identities probs list probabilities","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_actor_prob_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility for building a line in the interaction section of the input file — get_actor_prob_line","text":"text string enter line","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_agent_opt_arg_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lines to insert in file for agent optional arguments — get_agent_opt_arg_lines","title":"Get lines to insert in file for agent optional arguments — get_agent_opt_arg_lines","text":"Get lines insert file agent optional arguments","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_agent_opt_arg_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lines to insert in file for agent optional arguments — get_agent_opt_arg_lines","text":"","code":"get_agent_opt_arg_lines(opt_args)"},{"path":"https://ahcombs.github.io/bayesactR/reference/get_agent_opt_arg_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lines to insert in file for agent optional arguments — get_agent_opt_arg_lines","text":"opt_args named list optional arguments one agent","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_agent_opt_arg_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lines to insert in file for agent optional arguments — get_agent_opt_arg_lines","text":"list lines file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_eqn_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct file string (equation) — get_eqn_file","title":"Construct file string (equation) — get_eqn_file","text":"builds correct filepath equations checks specified gender available. equations given filepath, returns filepath ignores specified gender. input name actdata, saves dataset \"actdata_dicts_eqns\" folder working directory","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_eqn_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct file string (equation) — get_eqn_file","text":"","code":"get_eqn_file(key, gender, component, bayesact_dir)"},{"path":"https://ahcombs.github.io/bayesactR/reference/get_eqn_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct file string (equation) — get_eqn_file","text":"gender string component string (\"impression\", \"emotion\") eqn string","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_eqn_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct file string (equation) — get_eqn_file","text":"string filepath","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_interaction_opt_arg_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lines to insert in file for interaction optional arguments — get_interaction_opt_arg_lines","title":"Get lines to insert in file for interaction optional arguments — get_interaction_opt_arg_lines","text":"Get lines insert file interaction optional arguments","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_interaction_opt_arg_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lines to insert in file for interaction optional arguments — get_interaction_opt_arg_lines","text":"","code":"get_interaction_opt_arg_lines(opt_args)"},{"path":"https://ahcombs.github.io/bayesactR/reference/get_interaction_opt_arg_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lines to insert in file for interaction optional arguments — get_interaction_opt_arg_lines","text":"opt_args optional arguments","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_interaction_opt_arg_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lines to insert in file for interaction optional arguments — get_interaction_opt_arg_lines","text":"list lines file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert comma-separated strings in cell entries to lists when needed. — get_lists","title":"Convert comma-separated strings in cell entries to lists when needed. — get_lists","text":"Useful actor interaction input read csv file.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert comma-separated strings in cell entries to lists when needed. — get_lists","text":"","code":"get_lists(row)"},{"path":"https://ahcombs.github.io/bayesactR/reference/get_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert comma-separated strings in cell entries to lists when needed. — get_lists","text":"row dataframe row convert return","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/get_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert comma-separated strings in cell entries to lists when needed. — get_lists","text":"row needed entries converted lists","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/insert_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert lines into template — insert_lines","title":"Insert lines into template — insert_lines","text":"Insert lines template","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/insert_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert lines into template — insert_lines","text":"","code":"insert_lines(file, lines, start, end, insertAt = \"end\")"},{"path":"https://ahcombs.github.io/bayesactR/reference/insert_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert lines into template — insert_lines","text":"file template object lines lines insert start line start end line end insertAt string, whether put close possible start end (\"start\", \"end\")","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/insert_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert lines into template — insert_lines","text":"file additional lines","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an interaction line to the simulation text file — interaction","title":"Add an interaction line to the simulation text file — interaction","text":"Add interaction line simulation text file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an interaction line to the simulation text file — interaction","text":"","code":"interaction(   agent,   object,   agent_ident = \"person\",   agent_ident_prob = \"1\",   object_ident = \"person\",   object_ident_prob = \"1\",   opt_args = \"\" )"},{"path":"https://ahcombs.github.io/bayesactR/reference/interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an interaction line to the simulation text file — interaction","text":"agent agent name object object name agent_ident agent identities agent_ident_prob agent identity probabilities object_ident object identities object_ident_prob object identity probabilities opt_args arguments","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an interaction line to the simulation text file — interaction","text":"lines add","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/make_file_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct file string (dictionary) — make_file_string","title":"Construct file string (dictionary) — make_file_string","text":"constructs correct file string dictionary information input name actdata, saves dataset \"actdata_dicts_eqns\" folder working directory","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/make_file_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct file string (dictionary) — make_file_string","text":"","code":"make_file_string(dict, spec, key, gender, component, stat, bayesact_dir)"},{"path":"https://ahcombs.github.io/bayesactR/reference/make_file_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct file string (dictionary) — make_file_string","text":"dict string gender string (\"average\", \"female\", \"male\") component string (\"identity\", \"behavior\", \"setting\", \"modifier\") stat string (\"mean\", \"sd\", \"cov\") bayesact_dir string","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/make_file_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct file string (dictionary) — make_file_string","text":"string filepath","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/remove_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove lines that contain a given string — remove_line","title":"Remove lines that contain a given string — remove_line","text":"Remove lines contain given string","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/remove_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove lines that contain a given string — remove_line","text":"","code":"remove_line(string, file)"},{"path":"https://ahcombs.github.io/bayesactR/reference/remove_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove lines that contain a given string — remove_line","text":"string marker string file file remove ","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/remove_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove lines that contain a given string — remove_line","text":"file lines containing string removed","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/run_bayesact.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BayesACT for a single simulation file — run_bayesact","title":"Run BayesACT for a single simulation file — run_bayesact","text":"function calls BayesACT C code run BayesACT simulation given set input files. running function, must installed BayesACT C code dependencies, must file path top level C code directory--likely directory called \"bayesact.\" See BayesACTR documentation information C code setup. must also created set input files containing specifications simulation either using write_input_from_df() (recommended) manually creating . file name main simulation txt file--required argument write_input_from_df()--passed \"simfilename\" argument.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/run_bayesact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BayesACT for a single simulation file — run_bayesact","text":"","code":"run_bayesact(   simfilename,   bayesact_dir,   input_dir = \"bayesact_input\",   output_dir = \"bayesact_output\",   wd = getwd() )"},{"path":"https://ahcombs.github.io/bayesactR/reference/run_bayesact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BayesACT for a single simulation file — run_bayesact","text":"simfilename name simulation txt file created write_input_from_df(). file name passed \"simfilename\" input function. bayesact_dir top level directory BayesACT code lives. typically folder called \"bayesact.\" input_dir directory simulation txt file . output_dir directory put bayesact output. Defaults folder named \"bayesact_output\" current working directory. folder specified already exist, created. wd current working directory.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/run_bayesact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BayesACT for a single simulation file — run_bayesact","text":"output file path","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/run_bayesact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run BayesACT for a single simulation file — run_bayesact","text":"function runs simulation, saves output output directory specified, returns file path csv contains simulation results. output saved folder includes text output printed terminal simulation run using command line. can helpful debugging purposes. simulation complete successfully, function prints warning error code thrown C code. simulations can slow. surprised one takes several minutes run. code adapted written Jon Morgan Kim Rogers.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/run_bayesact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BayesACT for a single simulation file — run_bayesact","text":"","code":"if (FALSE) { run_bayesact(simfilename = \"inputfile.txt\", bayesactdir = \"path/to/my/bayesact/C/directory\",     input_dir = \"my/input/directory\", output_dir = \"path/to/directory/for/output\") }"},{"path":"https://ahcombs.github.io/bayesactR/reference/save_dict_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Save dataframe dictionary — save_dict_df","title":"Save dataframe dictionary — save_dict_df","text":"newest shiniest save function","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/save_dict_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save dataframe dictionary — save_dict_df","text":"","code":"save_dict_df(data, filename, bayesact_dir)"},{"path":"https://ahcombs.github.io/bayesactR/reference/save_dict_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save dataframe dictionary — save_dict_df","text":"data data object save filename name save (return) bayesact_dir filepath bayesact toplevel directory","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/save_dict_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save dataframe dictionary — save_dict_df","text":"file name","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/save_eqn_actdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Save files where bayesact can find them — save_eqn_actdata","title":"Save files where bayesact can find them — save_eqn_actdata","text":"Save files bayesact can find ","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/save_eqn_actdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save files where bayesact can find them — save_eqn_actdata","text":"","code":"save_eqn_actdata(data, dataname, bayesact_dir)"},{"path":"https://ahcombs.github.io/bayesactR/reference/save_eqn_actdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save files where bayesact can find them — save_eqn_actdata","text":"data equation data object (actdata) dataname name actdata object bayesact_dir top level bayesact code directory","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/simfile_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Write sim information to .txt file — simfile_out","title":"Write sim information to .txt file — simfile_out","text":"Write sim information .txt file","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/simfile_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write sim information to .txt file — simfile_out","text":"","code":"simfile_out(template, filename, dir)"},{"path":"https://ahcombs.github.io/bayesactR/reference/simfile_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write sim information to .txt file — simfile_out","text":"template object write filename name write dir directory write ","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/standardize_option.html","id":null,"dir":"Reference","previous_headings":"","what":"standardize_option — standardize_option","title":"standardize_option — standardize_option","text":"function deals abbreviations parameter specification returns spellings used datasets.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/standardize_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"standardize_option — standardize_option","text":"","code":"standardize_option(input, param, version = \"dict\")"},{"path":"https://ahcombs.github.io/bayesactR/reference/standardize_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"standardize_option — standardize_option","text":"input string standardize param dictionary parameter expected (gender, component, stat) version dict eqn","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/standardize_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"standardize_option — standardize_option","text":"standardized version input string","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/wait_until_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Pause until terminal process is done — wait_until_done","title":"Pause until terminal process is done — wait_until_done","text":"Pause terminal process done","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/wait_until_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pause until terminal process is done — wait_until_done","text":"","code":"wait_until_done(termId)"},{"path":"https://ahcombs.github.io/bayesactR/reference/wait_until_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pause until terminal process is done — wait_until_done","text":"termId terminal id running","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/wait_until_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pause until terminal process is done — wait_until_done","text":"boolean success","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/write_input_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Write BayesACT input files — write_input_from_df","title":"Write BayesACT input files — write_input_from_df","text":"function takes information three dataframes (nodelist created blank_nodelist() add_actor(), edgelist created blank_edgelist() add_interaction(), eventslist created basic_event_df()) writes properly formatted input files needed run BayesACT C code.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/write_input_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write BayesACT input files — write_input_from_df","text":"","code":"write_input_from_df(   nodelist,   edgelist,   eventslist,   simfilename,   eventfilename,   bayesact_dir,   input_dir = \"bayesact_input\" )"},{"path":"https://ahcombs.github.io/bayesactR/reference/write_input_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write BayesACT input files — write_input_from_df","text":"nodelist dataframe giving dictionary information actor constructed using blank_nodelist() add_actor(). edgelist dataframe delineating starting parameters (actor identity vector, object identity vector, probabilities) dyad. Constructed using blank_edgelist() add_interaction(). eventslist dataframe containing ordered list actions perform. Created using basic_event_df(). simfilename file name save sim file. extension \".txt\". name passed simfilename argument run_bayesact() order run simulation. eventfilename file name save events file. extension \".events\". bayesact_dir path top level directory BayesACT C code located. Generally folder called \"bayesact.\" input_dir directory save sim events files. directory already exist, created. path passed input_dir argument run_bayesact() run simulation.","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/write_input_from_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write BayesACT input files — write_input_from_df","text":"information dataframes used write following files. Generally, users need open edit files can simply pass required filepaths filenames run_bayesact(), information provided debugging purposes. Examples files can found BayesACT C code directory \"examples\" subdirectory. - .txt file providing information actors relationships (nodelist edgelist). Users set name file using \"simfilename\" argument. file name must also passed run_bayesact() order run simulation. saved input_dir. - file extension \".events\" contains specifications events happen simulation (eventslist). saved input_dir. - Four eight files \".dat\" \".csv\" extensions provide EPA rating information identities, behaviors, modifiers can occur simulations. written \"data\" folder BayesACT C code top directory. information three dataframes (agents, interactions, events), write .txt sim file .events file format required BayesACT. contain information actors, interactions/dyads, events/actions. data format expected agents interactions similar used social network analysis. Information individual actors (including name, dictionaries, equations, etc) stored node list (one line per actor). Information specific ties actors (called interactions ), identity distributions, stored edgelist-like format (one line per directed tie). function also requires events file, simply dataframe containing information actions simulated (one line per action)","code":""},{"path":"https://ahcombs.github.io/bayesactR/reference/write_input_from_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write BayesACT input files — write_input_from_df","text":"","code":"if (FALSE) { write_input_from_df(some_nodelist, some_edgelist, some_eventslist,     simfilename = \"mysimfile.txt\", eventfilename = \"myeventfile.events\",     bayesactdir = \"path/to/my/C/code/bayesact\",     input_dir = \"path/to/directory/to/save/inputfiles\") }"}]
